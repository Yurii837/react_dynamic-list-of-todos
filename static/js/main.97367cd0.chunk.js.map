{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["mateApi","GetEndpoint","name","id","fetch","then","responce","json","TodoList","setSelectUser","selectUser","useState","todos","setTodos","prepareTodos","setPrepareTodos","todosForRand","setTodosForRand","filterByString","setFilterByString","filterByComplete","setFilterByComplete","isRandom","setIsRandom","getAllTodos","a","allTodosFromServer","filteringTodos","filter","todo","index","toDos","length","userId","title","useEffect","completeStatusForFiltered","includes","completed","filterHandler","i","j","Math","floor","random","shuffleArray","className","type","value","onChange","event","target","defaultValue","onClick","prev","map","classNames","checked","readOnly","CurrentUser","resetUserId","email","phone","user","setUser","getUserInfo","userInfo","App","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97367cd0.chunk.js","sourcesContent":["const mateApi = 'https://mate.academy/students-api/';\n\nexport const GetEndpoint = (name: string, id = '') => {\n  return fetch(`${mateApi}${name}${id}`)\n    .then(responce => responce.json());\n};\n\n// export function getAll(): Promise<Good[]> {\n//   return fetch(API_URL)\n//     .then(response => response.json());\n// }\n\n// export const get5First = async (): Promise<Good[]> => {\n//   const allgoods = await fetch(API_URL)\n//     .then(response => response.json());\n\n//   return allgoods.slice(0, 5);\n// };\n\n// export const getRedGoods = async (): Promise<Good[]> => {\n//   const allgoods = await fetch(API_URL)\n//     .then(response => response.json());\n\n//   return allgoods.filter((good: { color: string; }) => good.color === 'red');\n// };\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { GetEndpoint } from '../../api';\n\ntype Propps = {\n  setSelectUser: (userId: number) => void,\n  selectUser: number,\n};\n\nexport const TodoList: React.FC<Propps> = ({ setSelectUser, selectUser }) => {\n  const [todos, setTodos] = useState([]);\n  const [prepareTodos, setPrepareTodos] = useState(todos);\n  const [todosForRand, setTodosForRand] = useState(prepareTodos);\n  const [filterByString, setFilterByString] = useState('');\n  const [filterByComplete, setFilterByComplete] = useState('all');\n  const [isRandom, setIsRandom] = useState(false);\n\n  const getAllTodos = async () => {\n    const allTodosFromServer = await GetEndpoint('todos');\n    const filteringTodos\n    = allTodosFromServer.filter((todo: Todo, index: number, toDos: Todo[]) => {\n      return (\n        index < toDos.length - 1\n          ? todo.userId !== toDos[index + 1].userId\n            && todo.title !== toDos[index + 1].title\n          : true\n      );\n    });\n\n    setTodos(filteringTodos);\n    setPrepareTodos(filteringTodos);\n  };\n\n  useEffect(() => {\n    getAllTodos();\n  }, []);\n\n  const filterHandler = () => {\n    let completeStatusForFiltered: boolean | string;\n\n    switch (filterByComplete) {\n      case 'notComplete': completeStatusForFiltered = true;\n        break;\n      case 'complete': completeStatusForFiltered = false;\n        break;\n      default: completeStatusForFiltered = 'all';\n    }\n\n    setPrepareTodos(\n      todos.filter((todo: Todo) => {\n        return todo.title.includes(filterByString)\n        && todo.completed !== completeStatusForFiltered;\n      }),\n    );\n  };\n\n  const shuffleArray = () => {\n    // eslint-disable-next-line no-plusplus\n    for (let i = prepareTodos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [prepareTodos[i], prepareTodos[j]] = [prepareTodos[j], prepareTodos[i]];\n    }\n  };\n\n  useEffect(() => {\n    filterHandler();\n  }, [filterByString, filterByComplete]);\n\n  useEffect(() => {\n    setTodosForRand(prepareTodos);\n\n    if (isRandom) {\n      shuffleArray();\n    } else {\n      setPrepareTodos(todosForRand);\n    }\n  }, [isRandom]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"actions\">\n        <div className=\"actions__filter\">\n          <h3>Filter</h3>\n          <input\n            type=\"text\"\n            value={filterByString}\n            onChange={(event) => setFilterByString(event.target.value)}\n          />\n        </div>\n        <div className=\"actions__select\">\n          <h3>Select</h3>\n          <select\n            name=\"select\"\n            defaultValue=\"all\"\n            onChange={(event) => setFilterByComplete(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"notComplete\"> Not complete</option>\n            <option value=\"complete\">Complete</option>\n          </select>\n        </div>\n        <div className=\"actions__select\">\n          <h3>Random list</h3>\n          <button\n            type=\"button\"\n            onClick={() => setIsRandom(prev => !prev)}\n          >\n            Random/Default\n          </button>\n        </div>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {prepareTodos.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => setSelectUser(todo.userId)}\n                className={classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': todo.userId === selectUser,\n                })}\n                type=\"button\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n\n          <li className=\"TodoList__item TodoList__item--checked\">\n            <label>\n              <input type=\"checkbox\" checked readOnly />\n              <p>distinctio vitae autem nihil ut molestias quo</p>\n            </label>\n\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n            >\n              User&nbsp;#2\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { GetEndpoint } from '../../api';\n\ntype Props = {\n  userId: number;\n  resetUserId: (userId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, resetUserId }) => {\n  const [user, setUser] = useState<User>({ name: '', email: '', phone: '' });\n\n  const getUserInfo = async () => {\n    const userInfo = await GetEndpoint(`users/${userId}`);\n\n    setUser(userInfo);\n  };\n\n  useEffect(() => {\n    getUserInfo();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <button\n          className=\"CurrentUser__button button\"\n          type=\"button\"\n          onClick={() => resetUserId(0)}\n        >\n          Reset Users\n        </button>\n        <span>\n          Selected user:\n          {' '}\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          setSelectUser={setSelectedUserId}\n          selectUser={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              resetUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}